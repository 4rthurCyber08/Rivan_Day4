
## Setup WinServer 2022, DNS, and WebServer
  - Turn off the firewall
  - Change the computer name
  - Configure ip addresses

## Setup DNS and website for sec69.com
  - DNS records with an A record for the CA
  - Website


## Create Private key with a Selfsigned Cert

openssl req -x509 -newkey rsa:2048 -days 365 -keyout privkey-sec69.pem -out rootca-sec69.pem -nodes


## Create a Certificate Signing Request

openssl req -newkey rsa:2048 -days 365 -keyout privkey-server-sec69.pem -out req-server-sec69.pem -nodes

*NOTE: the CSR came from the client (sec69.com), which means the information must be for the client.


## Create a Configuration File to add SAN attributes to the certificate.

nano san-server-sec69.com

Paste the SAN 

subjectAltName=DNS:www.ccna70.com,DNS:ccna70.com,IP:192.168.102.200


## Sign the CSR with the added SAN information

openssl x509 -req -in req-server-sec69.pem -CA rootca-sec69.pem -CAkey privkey-sec69.pem -CAcreateserial -out signed-server-sec69.pem -extfile san-server-sec69.cnf


## Verify SignedCertificate Validiy

openssl verify -CAfile rootca-sec69.pem signed-server-sec69.pem 

## Convert the Signed Certificate to .pfx

openssl pkcs12 -export -out signed-server-sec69.pfx -inkey privkey-server-sec69.pem -in signed-server-sec69.pem

## Transfer the files to Windows

ftp [windows ip]
put rootca-sec69.pem
put signed-server-sec69.pfx 

## Assign the signed-server-sec69.pfx as the SSL certificate for the domain

## Trust the root CA








**************


Create Private key with Selfsigned Cert

@linux
openssl req -x509 -newkey rsa:2048 -days 365 -keyout key-ccna70.pem -out ca-ccna70.pem -subj "C=PH/ST=National Capital Region/L=Makati/O=Rivancorp/OU=IT/CN=ca.ccna70.com/emailAddress=admin@rivanit.com"

*NOTE: Make sure common name is accessible by client

Display Certificate Info

@linux
openssl x509 -in ca-ccna70.pem -noout -text


Create a CSR

@linux
openssl req -newkey rsa:2048 -days 365 -keyout server-key.pem -out server-req.pem -subj "/C=PH/ST=National Capital Region/L=Makati/O=CCNA70/OU=IT/CN=www.ccna70.com/emailAddress=ccna70@rivanit.com"


Sign the CSR

@linux
openssl x509 -req -in server-req.pem -CA ca-ccna70.pem  -CAkey key-ccna70.pem -CAcreateserial -out server-cert.pem -extfile server-ext.cnf


Create a CNF file for SAN

subjectAltName=DNS:www.ccna70.com,DNS:ccna70.com,IP:192.168.102.200


Verify a certificate

@linux
openssl verify -CAfile ca-ccna70.pem server-cert.pem


win + r = mmc

Trust the root CA then convert server cert to pfx then upload to Personal Certificate


















**************
Add Certificate to Website

1. Generate Private key

openssl ciphers -v

For root CA (NetOps)
openssl genrsa -aes256 -out ccna70.pem 2048

For server (Windows)
openssl genrsa -aes256 -out win69.pem 2048


2. Output Root Certificate via Private Key

openssl req -new -x509 -key ccna70.pem -out ccna70.crt -days 365

3. Generate a CSR for the server

Openssl req -new -key win69.pem -out server.csr

FOR PFX

openssl pkcs12 -export -out ccna70_cert.pfx -inkey ccna70_key.pem -in ccna70_cert.crt -addext "subjectAltName = DNS:ccna70.com,DNS:www.ccna70.com"


2. Sign the servers csr using the root CA

openssl x509 -req -in server.csr -CA rivan69.crt -CAkey rivan69.pem -CAcreateserial -out serversigned.crt -days 356 -sha256
**************





Steps
1. Create Private and Public key

For user:admin

[SSH-KEYGEN]

Create Private Key
@linux
ssh-keygen -t rsa -b 2048 -f 



[OPENSSL]
openssl genrsa -out art.pem 2048



Extract Public Key from Private Key

@linux
openssl rsa -in art.pem -pubout -out art_pub.pem

Set Permissions for Keys

@linux
chmod 600 art.pem 
chmod 644 art_pub.pem












JUMPSERVER

*********************
SSH Public Key Authentication

1. Setup SSH.
@Cisco
conf t
 ip domain name security.sec
 crypto key generate rsa modulus 2048
 ip ssh version 2
 line vty 0 14
  login local
  transport input all
  end


2. Create key.
@SecureCRT
	Tools > Create Public Key
	
	Key type: RSA
	Passphrase: 
	Key Length: 2048
	Format: Standard or OpenSSH (new)
	
	
@Cisco
conf t
 crypto key generate rsa modulus 2048 exportable label sec
 crypto key export rsa sec pem terminal 3des C1sc0123
 end

Grab The public and private key and assign them to their own respective file:

  Public Key: sec.pub
  Private Key: sec.priv


@Linux
ssh-keygen -t rsa -b 2048 -f mine
fold -b -w 72 /home/ubuntu/.ssh/id_rsa.pub


3. Create a User with public key-chain.
@Cisco
conf t
 username aerin privilege 15
 ip ssh pubkey-chain
  username aerin
   key-string
    <PASTE PUB KEY>
	exit
   end


4. Disable Password authentication.

@Cisco
conf t
 ip ssh server algorithm authentication publickey
 no ip ssh server algorithm authentication password
 no ip ssh server algorithm authentication keyboard
 end



*********************

PKI Server  (VPN With Certificate Authentication)

VPN-PH
conf t
crypto pki server CA-SERVER
  database url nvram:
  no shutdown
  grant auto     ! (auto-approves requests)
  hash sha256
 crypto pki trustpoint CA-SELF
 enrollment selfsigned
 subject-name CN=CA-SERVER
 revocation-check none
 rsakeypair CA-KEYS
crypto pki enroll CA-SELF
crypto pki server CA-SERVER
  shutdown   ! shut and start again to apply cert
  no shutdown
show crypto pki certificates
show crypto pki server CA-SERVER
show crypto pki certificates CA-SERVER


VPN-JP
conf t
crypto pki trustpoint CA-CLIENT
 enrollment url http://192.168.12.1:80
 subject-name CN=R2
 revocation-check none
 rsakeypair R2-KEY
crypto pki authenticate CA-CLIENT
crypto pki enroll CA-CLIENT

show crypto pki trustpoints
show crypto pki certificates


crypto pki import CA-TP certificate

username certuser attributes
 service-type ssh
 crypto map
  subject-name CN=user1@example.com
  issuer-name CN=CA-SERVER
  
  
  
ip ssh pubkey-chain
  username certuser
    key-hash sha256 <cert fingerprint or hash>

aaa new-model
aaa authentication login SSH_CERT_AUTH local
aaa authorization exec SSH_CERT_AUTH local
ip ssh certificate authentication
line vty 0 4
 login authentication SSH_CERT_AUTH
 transport input ssh
 
 

CERT Authentication

ip ssh certificate authentication
aaa new-model
aaa authentication login SSH_CERT_AUTH local
line vty 0 4
 login authentication SSH_CERT_AUTH
 transport input ssh


crypto isakmp policy 10
 encr aes
 authentication rsa-sig
 hash sha256
 group 2
 lifetime 3600

crypto isakmp identity dn
crypto isakmp trustpoint MY-CA

crypto ipsec transform-set TS esp-aes esp-sha-hmac
crypto map VPN-MAP 10 ipsec-isakmp
 set peer <other-router-ip>
 set transform-set TS















*****************
CERTIFICATE AUTHORITY MANAGEMENT

Gen


Generate a self-signed certificate via OpenSSL

1. Create a private key

@linux
openssl genrsa -out admin_privkey.pem 2048
openssl genrsa -aes256 -out rivan69.pem 2048

2. Output a self-signed certificate via the generated private key.

@linux
openssl req -new -x509 -key admin_privkey.pem -out admin_cert.pem -days 365
openssl req -new -x509 -days 3650 -key rivan69.pem -sha256 -extensions v3_ca -out www.rivan69.com


Certificate Authority

cd /etc/ssl/
nano openssl.cnf


*********
dir flash:
rename flash:pnp-tech-time flash:pnp-tech-time.old 
 match address 100
